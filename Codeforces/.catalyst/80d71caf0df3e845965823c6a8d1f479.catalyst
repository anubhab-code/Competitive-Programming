{"title":{"en":"A. Nastya and Strange Generator","ru":"A. Настя и странный генератор"},"contestId":"1340","problemIndex":"A","timeLimit":{"en":"1 second","ru":"1 секунда"},"memLimit":{"en":"256 megabytes","ru":"256 мегабайт"},"inputFormat":{"en":"standard input","ru":"стандартный ввод"},"outputFormat":{"en":"standard output","ru":"стандартный вывод"},"problemHtml":{"en":"<p><span class=\"tex-font-style-it\"> Denis was very sad after Nastya rejected him. So he decided to walk through the gateways to have some fun. And luck smiled at him! When he entered the first courtyard, he met a strange man who was selling something. </span></p><p>Denis bought a mysterious item and it was... Random permutation generator! Denis could not believed his luck.</p><p>When he arrived home, he began to study how his generator works and learned the algorithm. The process of generating a permutation consists of $$$n$$$ steps. At the $$$i$$$-th step, a place is chosen for the number $$$i$$$ $$$(1 \\leq i \\leq n)$$$. The position for the number $$$i$$$ is defined as follows:</p><ul> <li> For all $$$j$$$ from $$$1$$$ to $$$n$$$, we calculate $$$r_j$$$ &nbsp;— the minimum index such that $$$j \\leq r_j \\leq n$$$, and the position $$$r_j$$$ is not yet occupied in the permutation. If there are no such positions, then we assume that the value of $$$r_j$$$ is not defined. </li><li> For all $$$t$$$ from $$$1$$$ to $$$n$$$, we calculate $$$count_t$$$ &nbsp;— the number of positions $$$1 \\leq j \\leq n$$$ such that $$$r_j$$$ is defined and $$$r_j = t$$$. </li><li> Consider the positions that are still not occupied by permutation and among those we consider the positions for which the value in the $$$count$$$ array is maximum. </li><li> The generator selects one of these positions for the number $$$i$$$. The generator can choose <span class=\"tex-font-style-bf\">any</span> position. </li></ul><p>Let's have a look at the operation of the algorithm in the following example:</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/15abb96c35071a49b2b1acdf0082b04b54f18bd6.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"> </center><p>Let $$$n = 5$$$ and the algorithm has already arranged the numbers $$$1, 2, 3$$$ in the permutation. Consider how the generator will choose a position for the number $$$4$$$:</p><ul> <li> The values of $$$r$$$ will be $$$r = [3, 3, 3, 4, \\times]$$$, where $$$\\times$$$ means an indefinite value. </li><li> Then the $$$count$$$ values will be $$$count = [0, 0, 3, 1, 0]$$$. </li><li> There are only two unoccupied positions in the permutation: $$$3$$$ and $$$4$$$. The value in the $$$count$$$ array for position $$$3$$$ is $$$3$$$, for position $$$4$$$ it is $$$1$$$. </li><li> The maximum value is reached only for position $$$3$$$, so the algorithm will uniquely select this position for number $$$4$$$. </li></ul><p>Satisfied with his purchase, Denis went home. For several days without a break, he generated permutations. He believes that he can come up with random permutations no worse than a generator. After that, he wrote out the first permutation that came to mind $$$p_1, p_2, \\ldots, p_n$$$ and decided to find out if it could be obtained as a result of the generator.</p><p>Unfortunately, this task was too difficult for him, and he asked you for help. It is necessary to define whether the written permutation could be obtained using the described algorithm if the generator always selects the position Denis needs.</p>","ru":"<p><span class=\"tex-font-style-it\">Расстроившись после такого отношения Насти, Денис был очень грустным. Ничего не могло развеселить отвергнутого парня. Чтобы хоть как-то развеселиться он решил побродить по подворотням. И, как ни странно, ему улыбнулась удача! Зайдя в первый двор, он встретил странного человека, который чем-то торговал. </span></p><p>Оглядевшись вокруг, Денис подошел к незнакомцу и купил загадочный товар. Им оказался... Генератор случайных перестановок! Именно это мальчик так давно искал!</p><p>Придя домой он стал изучать, как работает его генератор и узнал алгоритм. Процесс генерации перестановки состоит из $$$n$$$ шагов. На $$$i$$$-м шаге выбирается позиция (индекс) для значения $$$i$$$ $$$(1 \\leq i \\leq n)$$$. Позиция для значения $$$i$$$ определяется следующим образом:</p><ul> <li> Для всех $$$j$$$ от $$$1$$$ до $$$n$$$ посчитаем $$$r_j$$$ &nbsp;— минимальный такой индекс, что $$$j \\leq r_j \\leq n$$$, a позиция $$$r_j$$$ еще не занята в перестановке. Если таких позиций нет, то будем считать, что значение $$$r_j$$$ не определено. </li><li> Для всех $$$t$$$ от $$$1$$$ до $$$n$$$ посчитаем $$$count_t$$$ &nbsp;— количество таких позиций $$$1 \\leq j \\leq n$$$, что значение $$$r_j$$$ определено и $$$r_j = t$$$. </li><li> Рассмотрим все еще не занятые позиции перестановки и среди таких рассмотрим позиции, для которых значение в массиве $$$count$$$ максимально. </li><li> Генератор выбирает одну из таких позиций для значения $$$i$$$. Генератор может выбрать <span class=\"tex-font-style-bf\">любую</span> позицию. </li></ul><p>Рассмотрим работу алгоритма на следующем примере:</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/15abb96c35071a49b2b1acdf0082b04b54f18bd6.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"> </center><p>Пусть $$$n = 5$$$ и алгоритм уже расставил значения $$$1, 2, 3$$$ в перестановке. Рассмотрим, как генератор будет выбирать позицию для значения $$$4$$$:</p><ul> <li> Значения $$$r$$$ будут $$$r = [3, 3, 3, 4, \\times]$$$, где $$$\\times$$$ означает неопределенное значение. </li><li> Тогда значения $$$count$$$ будут $$$count = [0, 0, 3, 1, 0]$$$. </li><li> Есть только две не занятые позиции в перестановке: $$$3$$$ и $$$4$$$. Значение в массиве $$$count$$$ для позиции $$$3$$$ равно $$$3$$$, для позиции $$$4$$$ равно $$$1$$$. </li><li> Максимальное значение достигается только для позиции $$$3$$$, поэтому алгоритм однозначно выберет эту позицию для значения $$$4$$$. </li></ul><p>Довольный своим приобретением Денис пошел домой. Несколько дней без перерыва он генерировал перестановки и решил, что преисполнился в осознании процесса генерации. Он считает, что может придумывать случайные перестановки не хуже генератора. </p><p>После этого он выписал первую пришедшую на ум перестановку $$$p_1, p_2, \\ldots, p_n$$$ и решил узнать, могла ли она получится в результате работы генератора.</p><p>К сожалению, эта задача оказалась слишком сложна для него, и он обратился за помощью к вам. Нужно определить, могла ли получиться выписанная перестановка применением описанного алгоритма, если генератор всегда выбирает нужную Денису позицию.</p>"},"inSpecsHtml":{"en":"<div class=\"section-title\">Input</div><p>The first line contains a single integer $$$t$$$ $$$(1 \\leq t \\leq 10^5)$$$ &nbsp;— the number of test cases. Then the descriptions of the test cases follow.</p><p>The first line of the test case contains a single integer $$$n$$$ $$$(1 \\leq n \\leq 10^5)$$$ &nbsp;— the size of the permutation.</p><p>The second line of the test case contains $$$n$$$ different integers $$$p_1, p_2, \\ldots, p_n$$$ ($$$1 \\leq p_i \\leq n$$$) &nbsp;— the permutation written by Denis.</p><p>It is guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$10^5$$$.</p>","ru":"<div class=\"section-title\">Входные данные</div><p>В первой строке записано целое число $$$t$$$ $$$(1 \\leq t \\leq 10^5)$$$ &nbsp;— количество наборов входных данных в тесте. Далее содержатся сами описания наборов.</p><p>В первой строке каждого набора находится единственное целое число $$$n$$$ $$$(1 \\leq n \\leq 10^5)$$$ &nbsp;— длина перестановки.</p><p>Во второй строке набора находится $$$n$$$ различных целых чисел $$$p_1, p_2, \\ldots, p_n$$$ ($$$1 \\leq p_i \\leq n$$$) &nbsp;— выписанная Денисом перестановка.</p><p>Гарантируется, что сумма значений $$$n$$$ по всем входным данным не превосходит $$$10^5$$$.</p>"},"outSpecsHtml":{"en":"<div class=\"section-title\">Output</div><p>Print \"<span class=\"tex-font-style-tt\">Yes</span>\" if this permutation could be obtained as a result of the generator. Otherwise, print \"<span class=\"tex-font-style-tt\">No</span>\".</p><p>All letters can be displayed in any case.</p>","ru":"<div class=\"section-title\">Выходные данные</div><p>Выведите «<span class=\"tex-font-style-tt\">Yes</span>», если эта перестановка могла быть получена в результате работы генератора. В противном случае выведите «<span class=\"tex-font-style-tt\">No</span>».</p><p>Все буквы можно выводить в любом регистре.</p>"},"noteHtml":{"en":"<div class=\"section-title\">Note</div><p>Let's simulate the operation of the generator in the first test.</p><p>At the $$$1$$$ step, $$$r = [1, 2, 3, 4, 5], count = [1, 1, 1, 1, 1]$$$. The maximum value is reached in any free position, so the generator can choose a random position from $$$1$$$ to $$$5$$$. In our example, it chose $$$5$$$.</p><p>At the $$$2$$$ step, $$$r = [1, 2, 3, 4, \\times], count = [1, 1, 1, 1, 0]$$$. The maximum value is reached in positions from $$$1$$$ to $$$4$$$, so the generator can choose a random position among them. In our example, it chose $$$1$$$.</p><p>At the $$$3$$$ step, $$$r = [2, 2, 3, 4, \\times], count = [0, 2, 1, 1, 0]$$$. The maximum value is $$$2$$$ and is reached only at the $$$2$$$ position, so the generator will choose this position.</p><p>At the $$$4$$$ step, $$$r = [3, 3, 3, 4, \\times], count = [0, 0, 3, 1, 0]$$$. The maximum value is $$$3$$$ and is reached only at the $$$3$$$ position, so the generator will choose this position.</p><p>At the $$$5$$$ step, $$$r = [4, 4, 4, 4, \\times], count = [0, 0, 0, 4, 0]$$$. The maximum value is $$$4$$$ and is reached only at the $$$4$$$ position, so the generator will choose this position.</p><p>In total, we got a permutation of $$$2, 3, 4, 5, 1$$$, that is, a generator could generate it.</p>","ru":"<div class=\"section-title\">Примечание</div><p>Промоделируем работу генератора на первом тесте.</p><p>На $$$1$$$ шаге $$$r = [1, 2, 3, 4, 5], count = [1, 1, 1, 1, 1]$$$. Максимальное значение достигается в любой свободной позиции, поэтому генератор может выбрать случайную позицию от $$$1$$$ до $$$5$$$. В нашем примере он выбрал $$$5$$$.</p><p>На $$$2$$$ шаге $$$r = [1, 2, 3, 4, \\times], count = [1, 1, 1, 1, 0]$$$. Максимальное значение достигается в позициях от $$$1$$$ до $$$4$$$, поэтому генератор может выбрать случайную позицию среди них. В нашем примере он выбрал $$$1$$$.</p><p>На $$$3$$$ шаге $$$r = [2, 2, 3, 4, \\times], count = [0, 2, 1, 1, 0]$$$. Максимальное значение равно $$$2$$$ и достигается только в позиции $$$2$$$, поэтому генератор выберет эту позицию.</p><p>На $$$4$$$ шаге $$$r = [3, 3, 3, 4, \\times], count = [0, 0, 3, 1, 0]$$$. Максимальное значение равно $$$3$$$ и достигается только в позиции $$$3$$$, поэтому генератор выберет эту позицию.</p><p>На $$$5$$$ шаге $$$r = [4, 4, 4, 4, \\times], count = [0, 0, 0, 4, 0]$$$. Максимальное значение равно $$$4$$$ и достигается только в позиции $$$4$$$, поэтому генератор выберет эту позицию.</p><p>Итого мы получили перестановку $$$2, 3, 4, 5, 1$$$, то есть генератор мог её сгенерировать.</p>"},"sampleTestcases":[{"id":1639112502029,"input":"5\n5\n2 3 4 5 1\n1\n1\n3\n1 3 2\n4\n4 2 3 1\n5\n1 5 2 4 3\n","output":"Yes\nYes\nNo\nYes\nNo\n"}],"submitUrl":"https://codeforces.com/problemset/submit","language":"python"}