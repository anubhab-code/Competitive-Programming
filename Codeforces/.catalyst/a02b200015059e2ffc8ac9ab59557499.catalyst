{"title":{"en":"A. Countdown","ru":"A. Обратный отсчет"},"contestId":"1573","problemIndex":"A","timeLimit":{"en":"1 second","ru":"1 секунда"},"memLimit":{"en":"256 megabytes","ru":"256 мегабайт"},"inputFormat":{"en":"standard input","ru":"стандартный ввод"},"outputFormat":{"en":"standard output","ru":"стандартный вывод"},"problemHtml":{"en":"<p>You are given a digital clock with $$$n$$$ digits. Each digit shows an integer from $$$0$$$ to $$$9$$$, so the whole clock shows an integer from $$$0$$$ to $$$10^n-1$$$. The clock will show leading zeroes if the number is smaller than $$$10^{n-1}$$$.</p><p>You want the clock to show $$$0$$$ with as few operations as possible. In an operation, you can do one of the following: </p><ul> <li> decrease the number on the clock by $$$1$$$, or </li><li> swap two digits (you can choose which digits to swap, and they don't have to be adjacent). </li></ul><p>Your task is to determine the minimum number of operations needed to make the clock show $$$0$$$.</p>","ru":"<p>У вас есть цифровые часы, на которых всегда отображаются $$$n$$$ цифр. Каждая цифра может быть любым целым числом от $$$0$$$ до $$$9$$$, поэтому часы могут показывать целые числа от $$$0$$$ до $$$10^n-1$$$. Часы будут показывать лидирующие нули, если число меньше, чем $$$10^{n-1}$$$.</p><p>Вы хотите сделать так, чтобы часы показывали $$$0$$$, за минимальное число операций. За одну операцию вы можете сделать одно из следующего: </p><ul> <li> уменьшить число на часах на $$$1$$$, или </li><li> поменять местами две цифры (вы можете выбрать, цифры на каких позициях менять местами, они не обязательно должны быть соседними). </li></ul><p>Определите, какое минимальное число операций необходимо сделать, чтобы часы показывали $$$0$$$.</p>"},"inSpecsHtml":{"en":"<div class=\"section-title\">Input</div><p>Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10^3$$$).</p><p>The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 100$$$) — number of digits on the clock.</p><p>The second line of each test case contains a string of $$$n$$$ digits $$$s_1, s_2, \\ldots, s_n$$$ ($$$0 \\le s_1, s_2, \\ldots, s_n \\le 9$$$) — the number on the clock.</p><p>Note: If the number is smaller than $$$10^{n-1}$$$ the clock will show leading zeroes.</p>","ru":"<div class=\"section-title\">Входные данные</div><p>Во входных данных находятся несколько наборов входных данных. В первой строке находится одно целое число $$$t$$$ ($$$1 \\le t \\le 10^3$$$)&nbsp;— количество наборов входных данных. Далее следуют наборы входных данных.</p><p>Первая строка набора входных данных содержит целое число $$$n$$$ ($$$1 \\le n \\le 100$$$) — количество цифр на часах.</p><p>Вторая строка содержит строку из $$$n$$$ цифр $$$s_1, s_2, \\ldots, s_n$$$ ($$$0 \\le s_1, s_2, \\ldots, s_n \\le 9$$$) — начальное число на часах.</p><p>Обратите внимание, что если число на часах меньше $$$10^{n-1}$$$, то часы будут показывать лидирующие нули.</p>"},"outSpecsHtml":{"en":"<div class=\"section-title\">Output</div><p>For each test case, print one integer: the minimum number of operations needed to make the clock show $$$0$$$.</p>","ru":"<div class=\"section-title\">Выходные данные</div><p>Для каждого набора входных данных выведите наименьшее количество операций, чтобы установить на часах значение $$$0$$$.</p>"},"noteHtml":{"en":"<div class=\"section-title\">Note</div><p>In the first example, it's optimal to just decrease the number $$$7$$$ times.</p><p>In the second example, we can first swap the first and last position and then decrease the number by $$$1$$$.</p><p>In the third example, the clock already shows $$$0$$$, so we don't have to perform any operations.</p>","ru":"<div class=\"section-title\">Примечание</div><p>В первом примере оптимально просто уменьшить число $$$7$$$ раз.</p><p>Во втором примере можно сначала поменять местами первую и последнюю цифры, а затем уменьшить число на $$$1$$$.</p><p>В третьем примере часы уже показывают $$$0$$$, поэтому можно ничего не делать.</p>"},"sampleTestcases":[{"id":1639590189365,"input":"7\n3\n007\n4\n1000\n5\n00000\n3\n103\n4\n2020\n9\n123456789\n30\n001678294039710047203946100020\n","output":"7\n2\n0\n5\n6\n53\n115\n"}],"submitUrl":"https://codeforces.com/contest/1573/submit","language":"python"}